1. Funções de perda personalizadas
Quando estamos criando modelos para certas situações, podemos ter requisitos especiais. As funções de perda personalizadas podem ajudar a orientar nossas redes neurais para atender a essas necessidades.

2. A direção é importante
A direção é importante para as previsões de variação do preço das ações. Se uma mudança de preço foi em uma direção positiva, queremos prever algo também na direção positiva. Casos em que a direção da previsão está errada podem terminar mal.

3. MSE com penalidade direcional
Uma maneira de orientar nossa rede neural para prever a direcionalidade correta é aplicar uma penalidade à direção de previsão incorreta. Ainda podemos usar a penalidade de erro quadrática média, mas se a direção estiver errada, multiplicaremos a perda por um fator de penalidade.

4. Implementação de funções de perda personalizadas
Para implementar funções de perda personalizadas, precisamos importar algumas coisas. Um é nosso back-end, que neste caso é tensorflow. Existem outros back-ends, como theano, que terão nomes de função ligeiramente diferentes para o que fazemos aqui.

5. Criação de uma função
A seguir, criamos a função de perda real como uma função Python. Isso começa com def, então tem o nome da função - vamos chamá-la de mean_squared_error. Em seguida, fornecemos os argumentos, que para as funções de perda de keras devem ser y_true e y_pred para os valores reais e previstos.

6. Perda de erro quadrático médio
Vejamos primeiro como seria a perda de erro quadrática média. Tomaríamos os valores verdadeiros menos os valores previstos e, em seguida, usaríamos tf-ponto-quadrado para elevar ao quadrado essa diferença. Então pegamos a média desse valor com tf-dot-reduce_mean. Dizemos a ele para tirar a média do eixo -1, que é o último eixo - isso pegará a média de todas as amostras de treinamento nas quais nossa rede acabou de treinar. Em seguida, retornamos esse valor como perda.

7. Adicionar perda personalizada para keras
Por último, precisamos importar perdas de pontos keras e definir esta função como parte das perdas de pontos keras. Isso o torna disponível para uso em nossos modelos. Podemos então especificar nosso nome de função de perda para o argumento de perda em model-dot-compile e ajustar o modelo.

8. Verificando a direção correta
Agora podemos adicionar uma penalidade para direções de previsão erradas. Primeiro verificamos se o sinal da previsão e os valores reais são diferentes. Para fazer isso, multiplicaremos os valores verdadeiros por previsões e verificaremos onde é negativo usando tf-dot-less. Dois valores negativos ou dois valores positivos, que produzem um valor positivo quando multiplicados, significam que previmos a direção correta. Os sinais opostos darão um valor negativo.

9. Usando tf.where ()
Agora criamos nossa função de perda personalizada chamada sign_penalty e usamos um valor de penalidade de 10. Em seguida, usamos tf-dot-where, que leva 3 argumentos: uma matriz de booleanos ou valores True / False, código que será executado onde o A matriz booleana tem valores True e o código que será executado quando a matriz tiver valores False. Verificamos com tf-dot-less se a direção da previsão está correta. Quando a direção está errada, aplicamos uma penalidade ao quadrado dos valores reais menos os previstos. Quando a direção está correta, não usamos a penalidade.

10. Amarrando tudo
Agora que temos nossa instrução condicional, retornamos a média de nossos erros quadrados como fizemos antes. Também adicionamos nossa função de perda a perdas de pontos keras para que possamos usá-la.

11. Usando a perda personalizada
Para usar nossa perda, especificamos o nome da função durante a compilação. Aqui, criamos nosso mesmo modelo da última lição, mas estamos usando a função de perda sign_penalty em vez de mse em model-dot-compile ().

12. A forma de gravata borboleta
Assim que ajustamos nosso modelo, representamos novamente as previsões em relação aos valores reais. Isso resulta em uma forma interessante que se parece com uma gravata borboleta, pelo menos para as amostras de treinamento. A penalidade por classificação incorreta é forte o suficiente para forçar o modelo a corresponder principalmente aos sinais de previsões e valores reais.

13. Crie sua própria função de perda!
Agora vamos criar uma função de perda personalizada e experimentá-la!