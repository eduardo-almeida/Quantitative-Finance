1. Aprendizado de máquina para MPT
Agora aprenderemos como aplicar o aprendizado de máquina aos recursos e destinos que acabamos de criar. Lembre-se de que nossas metas são pesos de portfólio ideais e recursos são médias móveis de preços ponderadas exponencialmente.

2. Faça conjuntos de treinamento e teste
Faremos novamente conjuntos de treinamento e teste. Vamos definir o tamanho do trem para 80% aqui. train_size é calculado com o número de linhas em nossos recursos, a partir da forma. Em seguida, usamos a indexação do Python para obter o primeiro bloco de dados para train_size como o conjunto de treinamento e os dados de train_size até o final como o conjunto de teste.

3. Ajuste o modelo
Nossa próxima etapa é ajustar um modelo aos dados de treinamento. Florestas aleatórias geralmente são boas, então vamos continuar com isso. Por enquanto, não alteraremos os hiperparâmetros, exceto n_estimators, o número de árvores. Normalmente, o desempenho se nivela nas centenas de árvores, então eu o defino em 300. Em seguida, ajustamos nosso modelo aos dados de treinamento fornecendo os recursos e metas do método fit (). Depois disso, veremos como nosso modelo se saiu com a pontuação R ao quadrado.

4. Avalie o desempenho do modelo
Agora avaliaremos o desempenho do modelo com mais detalhes. Primeiro, vamos olhar para os retornos mensais e ver como eles se comparam a investir no ETF NASDAQ, QQQ. Veremos o conjunto de testes para verificar o desempenho em dados não vistos. Para obter previsões, usamos nosso modelo e prediz () em nossos recursos. Em seguida, calculamos os retornos multiplicando os retornos mensais com as previsões de teste. Observe que estamos usando a indexação iloc em nosso DataFrame - isso nos dá os retornos de train_size até o final dos dados, que são os retornos ponderados individualmente para cada uma das ações. Em seguida, usamos a soma de numpy () para somar as linhas em um número para cada mês. Observe que estamos fornecendo o argumento eixo = 1, portanto, os números são adicionados ao longo das linhas, não nas colunas. Finalmente, podemos plotar esses retornos em nosso conjunto de teste, e veja como isso se compara a investir no fundo do índice QQQ. Uma estratégia básica de investimento é comprar grandes índices como o NASDAQ, que é o QQQ, ou o S & P500.

5. Retornos mensais do modelo
Os resultados são meio confusos - alguns meses são melhores do que o QQQ, outros piores. Precisamos de uma maneira melhor de ver como foi o desempenho geral.

6. Calcular o portfólio hipotético
Podemos ver como nosso modelo está se saindo no conjunto de teste de uma maneira diferente, calculando os retornos de um investimento hipotético. Digamos que estejamos começando com 1000 dólares. Podemos criar uma lista contendo nosso saldo de caixa a cada mês, chamada algo_cash. A primeira entrada é o nosso valor inicial. Em seguida, percorremos cada um dos meses em nossas previsões do conjunto de teste. Para cada retorno mensal, multiplicamos o dinheiro por 1 + o retorno e definimos o dinheiro igual a este novo valor. O operador "asterisco é igual a" é um atalho para isso. Em seguida, acrescentamos o valor em dinheiro à nossa lista. Terminamos com uma lista, chamada algo_cash, de retornos previstos para os meses do conjunto de teste. Em seguida, fazemos a mesma coisa para QQQ e criamos uma lista de retornos verdadeiros para o índice QQQ. Finalmente, podemos olhar para os retornos gerais que foram propagados ao longo do tempo.

7. Trace os resultados
Por último, podemos traçar os resultados para ver como está indo ao longo do tempo. Parece que tivemos grandes perdas para começar, depois disparamos acima de QQQ, terminando no mesmo lugar. É um bom começo, mas precisamos de recursos melhores!

8. Treine seu modelo!
Agora é hora de você treinar uma modelo e ver como ela se sai!